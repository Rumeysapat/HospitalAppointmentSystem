// <auto-generated />
using System;
using Hospital.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Data.Migrations
{
    [DbContext(typeof(HospitalAppointmentDbContext))]
    partial class HospitalAppointmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("Hospital.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2025, 3, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedDate = new DateTime(2025, 3, 16, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Notes = "Kontrol randevusu",
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2025, 3, 18, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedDate = new DateTime(2025, 3, 16, 10, 45, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Notes = "Diyet planı kontrolü",
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2025, 3, 19, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedDate = new DateTime(2025, 3, 16, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Notes = "Genel sağlık kontrolü",
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 6, 12, 13, 0, 11, 666, DateTimeKind.Utc).AddTicks(9200),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kardiyoloji"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 6, 12, 13, 0, 11, 666, DateTimeKind.Utc).AddTicks(9210),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ortopedi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 6, 12, 13, 0, 11, 666, DateTimeKind.Utc).AddTicks(9210),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nöroloji"
                        });
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 6, 12, 16, 0, 11, 667, DateTimeKind.Local).AddTicks(1490),
                            DepartmentId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dr. Ahmet Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 6, 12, 16, 0, 11, 667, DateTimeKind.Local).AddTicks(1530),
                            DepartmentId = 2,
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Dr. Ayşe Demir"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 6, 12, 16, 0, 11, 667, DateTimeKind.Local).AddTicks(1540),
                            DepartmentId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dr. Mehmet Kaya"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 6, 12, 16, 0, 11, 667, DateTimeKind.Local).AddTicks(1540),
                            DepartmentId = 1,
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Dr. Zeynep Çelik"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 6, 12, 16, 0, 11, 667, DateTimeKind.Local).AddTicks(1540),
                            DepartmentId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dr. Canan Öztürk"
                        });
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "İstanbul, Türkiye",
                            CreatedDate = new DateTime(2025, 6, 12, 13, 0, 11, 667, DateTimeKind.Utc).AddTicks(2230),
                            DateOfBirth = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet.yilmaz@example.com",
                            FirstName = "Ahmet",
                            Gender = "Male",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Yılmaz",
                            PhoneNumber = "555-1234567"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ankara, Türkiye",
                            CreatedDate = new DateTime(2025, 6, 12, 13, 0, 11, 667, DateTimeKind.Utc).AddTicks(2240),
                            DateOfBirth = new DateTime(1990, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@example.com",
                            FirstName = "Ayşe",
                            Gender = "Female",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Demir",
                            PhoneNumber = "555-9876543"
                        },
                        new
                        {
                            Id = 3,
                            Address = "İzmir, Türkiye",
                            CreatedDate = new DateTime(2025, 6, 12, 13, 0, 11, 667, DateTimeKind.Utc).AddTicks(2240),
                            DateOfBirth = new DateTime(1980, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.kara@example.com",
                            FirstName = "Mehmet",
                            Gender = "Male",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Kara",
                            PhoneNumber = "555-2468101"
                        });
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 6, 12, 16, 0, 11, 667, DateTimeKind.Local).AddTicks(4330),
                            Description = "Admin Rolü, Tüm Haklara Sahiptir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 6, 12, 16, 0, 11, 667, DateTimeKind.Local).AddTicks(4340),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new TimeSpan(0, 17, 0, 0, 0));

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new TimeSpan(0, 9, 0, 0, 0));

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Picture")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 6, 12, 13, 0, 11, 667, DateTimeKind.Utc).AddTicks(7020),
                            Description = "Sistem yöneticisi",
                            Email = "admin@hospital.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            PasswordHash = new byte[0],
                            Picture = "default.jpg",
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("Hospital.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hospital.Entities.Concrete.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Doctor", b =>
                {
                    b.HasOne("Hospital.Entities.Concrete.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Schedule", b =>
                {
                    b.HasOne("Hospital.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.User", b =>
                {
                    b.HasOne("Hospital.Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Hospital.Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
